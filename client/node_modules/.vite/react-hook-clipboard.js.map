{
  "version": 3,
  "sources": ["../react-hook-clipboard/dist/index.js", "dep:react-hook-clipboard"],
  "sourcesContent": ["import { useEffect, useState } from \"react\";\n\nconst useClipboard = ({\n  updateFrequency = 1000\n} = {}, onReadError = () => {}) => {\n  const [clipboard, setClipboardContent] = useState(\"\");\n\n  const copyToClipboard = (clipboardContent, onCopyToClipboard = () => {}, onWriteError = () => {}) => {\n    if (navigator.permissions && navigator.clipboard) {\n      navigator.permissions.query({\n        name: \"clipboard-write\"\n      }).then(({\n        state\n      }) => {\n        if ([\"granted\", \"prompt\"].includes(state)) {\n          navigator.clipboard.writeText(clipboardContent).then(() => {\n            setClipboardContent(clipboardContent);\n            onCopyToClipboard(clipboardContent);\n          }, onWriteError);\n        } else {\n          onWriteError({\n            message: \"ClipboardWrite permission has been blocked as the user.\"\n          });\n        }\n      });\n    }\n  };\n\n  useEffect(() => {\n    let readClipboardIntervalId;\n\n    if (navigator.permissions && navigator.clipboard) {\n      navigator.permissions.query({\n        name: \"clipboard-read\"\n      }).then(({\n        state\n      }) => {\n        if ([\"granted\", \"prompt\"].includes(state)) {\n          readClipboardIntervalId = setInterval(() => {\n            navigator.clipboard.readText().then(clipboardContent => {\n              setClipboardContent(clipboardContent);\n            }, onReadError);\n          }, updateFrequency);\n        } else {\n          onReadError({\n            message: \"ClipboardRead permission has been blocked as the user.\"\n          });\n        }\n      });\n    }\n\n    return () => {\n      if (navigator.clipboard) {\n        clearInterval(readClipboardIntervalId);\n      }\n    };\n  }, []);\n  return [clipboard, copyToClipboard];\n};\n\nexport default useClipboard;", "import d from \"./node_modules/react-hook-clipboard/dist/index.js\";export default d;"],
  "mappings": ";;;;;;;;AAAA,mBAAoC;AAEpC,IAAM,eAAe,CAAC;AAAA,EACpB,kBAAkB;AAAA,IAChB,IAAI,cAAc,MAAM;AAAA,MAAO;AACjC,QAAM,CAAC,WAAW,uBAAuB,2BAAS;AAElD,QAAM,kBAAkB,CAAC,kBAAkB,oBAAoB,MAAM;AAAA,KAAI,eAAe,MAAM;AAAA,QAAO;AACnG,QAAI,UAAU,eAAe,UAAU,WAAW;AAChD,gBAAU,YAAY,MAAM;AAAA,QAC1B,MAAM;AAAA,SACL,KAAK,CAAC;AAAA,QACP;AAAA,YACI;AACJ,YAAI,CAAC,WAAW,UAAU,SAAS,QAAQ;AACzC,oBAAU,UAAU,UAAU,kBAAkB,KAAK,MAAM;AACzD,gCAAoB;AACpB,8BAAkB;AAAA,aACjB;AAAA,eACE;AACL,uBAAa;AAAA,YACX,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAOnB,8BAAU,MAAM;AACd,QAAI;AAEJ,QAAI,UAAU,eAAe,UAAU,WAAW;AAChD,gBAAU,YAAY,MAAM;AAAA,QAC1B,MAAM;AAAA,SACL,KAAK,CAAC;AAAA,QACP;AAAA,YACI;AACJ,YAAI,CAAC,WAAW,UAAU,SAAS,QAAQ;AACzC,oCAA0B,YAAY,MAAM;AAC1C,sBAAU,UAAU,WAAW,KAAK,sBAAoB;AACtD,kCAAoB;AAAA,eACnB;AAAA,aACF;AAAA,eACE;AACL,sBAAY;AAAA,YACV,SAAS;AAAA;AAAA;AAAA;AAAA;AAMjB,WAAO,MAAM;AACX,UAAI,UAAU,WAAW;AACvB,sBAAc;AAAA;AAAA;AAAA,KAGjB;AACH,SAAO,CAAC,WAAW;AAAA;AAGrB,IAAO,eAAQ;;;AC5DmD,IAAO,+BAAQ;",
  "names": []
}
